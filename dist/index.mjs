var r=class{to;from;constructor(t,e){this.from=t,this.to=e}draw(t){t.beginPath(),t.moveTo(this.from.x,this.from.y),t.lineTo(this.to.x,this.to.y),t.stroke()}};var s=class{nodes=[];edges=[];addNode(t){this.nodes.push(t)}addEdge({from:t,to:e}){let o=new r(t,e);this.edges.push(o)}removeNode(t){this.nodes=this.nodes.filter(e=>e!==t),this.edges=this.edges.filter(e=>e.from!==t&&e.to!==t)}removeEdge(t){this.edges=this.edges.filter(e=>e!==t)}draw(t){this.nodes.forEach(e=>{e.draw(t)}),this.edges.forEach(e=>{e.draw(t)})}};var d=class{x;y;width;height;color;constructor({x:t,y:e,width:o=200,height:a=50,color:n="#444"}){this.x=t,this.y=e,this.width=o,this.height=a,this.color=n}draw(t){t.fillStyle=this.color,t.fillRect(this.x,this.y,this.width,this.height)}};var h=class{canvas;ctx;graph;background;constructor({canvas:t,background:e="#333"}){this.canvas=t,this.background=e,this.ctx=t.getContext("2d"),this.graph=new s,this.draw()}addNode({node:t}){this.graph.addNode(t),this.draw()}removeNode({node:t}){this.graph.removeNode(t),this.draw()}addEdge({edge:t}){this.graph.addEdge(t),this.draw()}removeEdge({edge:t}){this.graph.removeEdge(t),this.draw()}addBackground(){this.ctx&&(this.ctx.fillStyle=this.background,this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height))}draw(){this.ctx&&(this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.addBackground(),this.graph.draw(this.ctx))}};export{r as Edge,s as Graph,h as InfiniteCanvas,d as Node};
//# sourceMappingURL=index.mjs.map