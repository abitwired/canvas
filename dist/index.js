"use strict";var f=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var u=Object.prototype.hasOwnProperty;var w=(r,t)=>{for(var i in t)f(r,i,{get:t[i],enumerable:!0})},b=(r,t,i,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of v(t))!u.call(r,s)&&s!==i&&f(r,s,{get:()=>t[s],enumerable:!(e=m(t,s))||e.enumerable});return r};var E=r=>b(f({},"__esModule",{value:!0}),r);var y={};w(y,{Edge:()=>d,Graph:()=>o,InfiniteCanvas:()=>p,Node:()=>n,Serializer:()=>l});module.exports=E(y);var d=class{to;from;constructor(t,i){this.from=t,this.to=i}draw(t){t.beginPath(),t.moveTo(this.from.x,this.from.y),t.lineTo(this.to.x,this.to.y),t.stroke()}};var o=class{nodes=[];edges=[];addNode(t){this.nodes.push(t)}addEdge({from:t,to:i}){let e=new d(t,i);this.edges.push(e)}removeNode(t){this.nodes=this.nodes.filter(i=>i!==t),this.edges=this.edges.filter(i=>i.from!==t&&i.to!==t)}removeEdge(t){this.edges=this.edges.filter(i=>i!==t)}draw(t){this.nodes.forEach(i=>{i.draw(t)}),this.edges.forEach(i=>{i.draw(t)})}};var n=class{id;x;y;width;height;color;constructor({id:t,x:i,y:e,width:s=200,height:h=50,color:a="#444"}){this.id=t,this.x=i,this.y=e,this.width=s,this.height=h,this.color=a}static createId(){return Math.random().toString(36).substring(2)}draw(t){t.shadowColor="rgba(0, 0, 0, 0.2)",t.shadowBlur=10,t.shadowOffsetX=5,t.shadowOffsetY=5;let i=5;t.fillStyle=this.color,t.beginPath(),t.moveTo(this.x+i,this.y),t.lineTo(this.x+this.width-i,this.y),t.quadraticCurveTo(this.x+this.width,this.y,this.x+this.width,this.y+i),t.lineTo(this.x+this.width,this.y+this.height-i),t.quadraticCurveTo(this.x+this.width,this.y+this.height,this.x+this.width-i,this.y+this.height),t.lineTo(this.x+i,this.y+this.height),t.quadraticCurveTo(this.x,this.y+this.height,this.x,this.y+this.height-i),t.lineTo(this.x,this.y+i),t.quadraticCurveTo(this.x,this.y,this.x+i,this.y),t.closePath(),t.fill(),t.strokeStyle="white",t.lineWidth=1,t.stroke()}};var l=class{static serialize(t){let i=t.nodes.map(s=>({id:s.id,x:s.x,y:s.y,width:s.width,height:s.height,color:s.color})),e=t.edges.map(s=>({to:s.to.id,from:s.from.id}));return JSON.stringify({nodes:i,edges:e})}static deserialize(t){let{nodes:i,edges:e}=JSON.parse(t),s=new o;return i.forEach(h=>{s.addNode(new n({id:h.id,x:h.x,y:h.y,width:h.width,height:h.height,color:h.color}))}),e.forEach(h=>{let a=s.nodes.find(c=>c.id===h.from),g=s.nodes.find(c=>c.id===h.to);if(a&&g)s.addEdge({from:a,to:g});else throw new Error(`Invalid edge: ${h.from} -> ${h.to}`)}),s}};var p=class{canvas;ctx;graph;background;scale=1;offsetX=0;offsetY=0;isPanning=!1;startX=0;startY=0;constructor({canvas:t,background:i="#333"}){this.canvas=t,this.background=i,this.ctx=t.getContext("2d"),this.graph=new o,this.canvas.addEventListener("wheel",this.zoom.bind(this),{passive:!1}),this.canvas.addEventListener("mousedown",this.startPan.bind(this)),this.canvas.addEventListener("mousemove",this.pan.bind(this)),this.canvas.addEventListener("mouseup",this.endPan.bind(this)),this.canvas.addEventListener("mouseleave",this.endPan.bind(this)),this.resizeCanvas()}setGraph(t){this.graph=t,this.draw()}addNode({node:t}){this.graph.addNode(t),this.draw()}removeNode({node:t}){this.graph.removeNode(t),this.draw()}addEdge({edge:t}){this.graph.addEdge(t),this.draw()}removeEdge({edge:t}){this.graph.removeEdge(t),this.draw()}resizeCanvas(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.draw()}startPan(t){this.isPanning=!0,this.startX=t.clientX-this.offsetX,this.startY=t.clientY-this.offsetY}pan(t){this.isPanning&&(this.offsetX=t.clientX-this.startX,this.offsetY=t.clientY-this.startY,this.draw())}endPan(){this.isPanning=!1}zoom(t){t.preventDefault();let i=1.1,e=this.canvas.getBoundingClientRect(),s=t.clientX-e.left,h=t.clientY-e.top,a=t.deltaY<0,g=(s-this.offsetX)/this.scale,c=(h-this.offsetY)/this.scale;this.scale*=a?i:1/i,this.offsetX=s-g*this.scale,this.offsetY=h-c*this.scale,this.draw()}drawBackground(){this.ctx.fillStyle=this.background,this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.ctx.fillStyle="rgba(255, 255, 255, 0.1)";for(let i=-this.offsetX%25;i<this.canvas.width;i+=25)for(let e=-this.offsetY%25;e<this.canvas.height;e+=25)this.ctx.beginPath(),this.ctx.arc(i,e,1,0,2*Math.PI),this.ctx.fill()}draw(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.drawBackground(),this.ctx.save(),this.ctx.translate(this.offsetX,this.offsetY),this.ctx.scale(this.scale,this.scale),this.graph.draw(this.ctx),this.ctx.restore()}};0&&(module.exports={Edge,Graph,InfiniteCanvas,Node,Serializer});
//# sourceMappingURL=index.js.map