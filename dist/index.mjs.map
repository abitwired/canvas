{"version":3,"sources":["../src/graph/edge.ts","../src/graph/index.ts","../src/graph/node.ts","../src/index.ts"],"sourcesContent":["import { Node } from \"./node\";\r\n\r\n/**\r\n * Edge class represents an edge in a graph.\r\n * @class\r\n * @property {Node} from - The node the edge is coming from.\r\n * @property {Node} to - The node the edge is going to.\r\n */\r\nexport class Edge {\r\n  to: Node;\r\n  from: Node;\r\n\r\n  constructor(from: Node, to: Node) {\r\n    this.from = from;\r\n    this.to = to;\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n    ctx.beginPath();\r\n    ctx.moveTo(this.from.x, this.from.y);\r\n    ctx.lineTo(this.to.x, this.to.y);\r\n    ctx.stroke();\r\n  }\r\n}\r\n","import { Node } from \"./node\";\r\nimport { Edge } from \"./edge\";\r\n\r\n/**\r\n * Graph class represents a graph of nodes and edges.\r\n * @class\r\n * @property {Node[]} nodes - The nodes in the graph.\r\n * @property {Edge[]} edges - The edges in the graph.\r\n */\r\nexport class Graph {\r\n  nodes: Node[] = [];\r\n  edges: Edge[] = [];\r\n\r\n  addNode(node: Node) {\r\n    this.nodes.push(node);\r\n  }\r\n\r\n  addEdge({ from, to }: { from: Node; to: Node }) {\r\n    const edge = new Edge(from, to);\r\n    this.edges.push(edge);\r\n  }\r\n\r\n  removeNode(node: Node) {\r\n    this.nodes = this.nodes.filter((n) => n !== node);\r\n    this.edges = this.edges.filter(\r\n      (edge) => edge.from !== node && edge.to !== node\r\n    );\r\n  }\r\n\r\n  removeEdge(edge: Edge) {\r\n    this.edges = this.edges.filter((e) => e !== edge);\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n    this.nodes.forEach((node) => {\r\n      node.draw(ctx);\r\n    });\r\n\r\n    this.edges.forEach((edge) => {\r\n      edge.draw(ctx);\r\n    });\r\n  }\r\n}","/**\r\n * Node class represents a node in a graph.\r\n * @class\r\n * @property {number} x - The x coordinate of the node.\r\n * @property {number} y - The y coordinate of the node.\r\n * @property {number} width - The width of the node.\r\n * @property {number} height - The height of the node.\r\n */\r\nexport class Node {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  color: string;\r\n\r\n  constructor({\r\n    x,\r\n    y,\r\n    width = 200,\r\n    height = 50,\r\n    color = \"#444\",\r\n  }: {\r\n    x: number;\r\n    y: number;\r\n    width?: number;\r\n    height?: number;\r\n    color?: string;\r\n  }) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.color = color;\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n    ctx.fillStyle = this.color;\r\n    ctx.fillRect(this.x, this.y, this.width, this.height);\r\n  }\r\n}\r\n","import { Graph } from \"./graph\";\r\nimport { Node } from \"./graph/node\";\r\nimport { Edge } from \"./graph/edge\";\r\n\r\n/**\r\n * InfiniteCanvas class represents a canvas that can be infinitely scrolled.\r\n * @class\r\n * @property {HTMLCanvasElement}\r\n * @property {CanvasRenderingContext2D | null}\r\n * @property {Graph}\r\n */\r\nexport class InfiniteCanvas {\r\n  canvas: HTMLCanvasElement;\r\n  ctx: CanvasRenderingContext2D | null;\r\n  graph: Graph;\r\n  background: string;\r\n\r\n  constructor({\r\n    canvas,\r\n    background = \"#333\",\r\n  }: {\r\n    canvas: HTMLCanvasElement;\r\n    background?: string;\r\n  }) {\r\n    this.canvas = canvas;\r\n    this.background = background;\r\n\r\n    this.ctx = canvas.getContext(\"2d\");\r\n    this.graph = new Graph();\r\n\r\n    this.draw();\r\n  }\r\n\r\n  /**\r\n   * Add a node to the canvas.\r\n   * @param {Node} node - The node to add.\r\n   */\r\n  public addNode({ node }: { node: Node }) {\r\n    this.graph.addNode(node);\r\n    this.draw();\r\n  }\r\n\r\n  /**\r\n   * Remove a node from the canvas.\r\n   * @param {Node} node - The node to remove.\r\n   */\r\n  public removeNode({ node }: { node: Node }) {\r\n    this.graph.removeNode(node);\r\n    this.draw();\r\n  }\r\n\r\n  /**\r\n   * Add an edge to the canvas.\r\n   * @param {Edge} edge - The edge to add.\r\n   */\r\n  public addEdge({ edge }: { edge: Edge }) {\r\n    this.graph.addEdge(edge);\r\n    this.draw();\r\n  }\r\n\r\n  /**\r\n   * Remove an edge from the canvas.\r\n   * @param {Edge} edge - The edge to remove.\r\n   */\r\n  public removeEdge({ edge }: { edge: Edge }) {\r\n    this.graph.removeEdge(edge);\r\n    this.draw();\r\n  }\r\n\r\n  /**\r\n   * Add a background to the canvas.\r\n   */\r\n  private addBackground() {\r\n    if (!this.ctx) {\r\n      return;\r\n    }\r\n\r\n    this.ctx.fillStyle = this.background;\r\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n  }\r\n\r\n  /**\r\n   * Draw the canvas.\r\n   */\r\n  private draw() {\r\n    if (!this.ctx) {\r\n      return;\r\n    }\r\n\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    // Add a background\r\n    this.addBackground();\r\n\r\n    this.graph.draw(this.ctx);\r\n  }\r\n}\r\n\r\nexport { Graph, Node, Edge };\r\n"],"mappings":"AAQO,IAAMA,EAAN,KAAW,CAChB,GACA,KAEA,YAAYC,EAAYC,EAAU,CAChC,KAAK,KAAOD,EACZ,KAAK,GAAKC,CACZ,CAEA,KAAKC,EAA+B,CAClCA,EAAI,UAAU,EACdA,EAAI,OAAO,KAAK,KAAK,EAAG,KAAK,KAAK,CAAC,EACnCA,EAAI,OAAO,KAAK,GAAG,EAAG,KAAK,GAAG,CAAC,EAC/BA,EAAI,OAAO,CACb,CACF,ECdO,IAAMC,EAAN,KAAY,CACjB,MAAgB,CAAC,EACjB,MAAgB,CAAC,EAEjB,QAAQC,EAAY,CAClB,KAAK,MAAM,KAAKA,CAAI,CACtB,CAEA,QAAQ,CAAE,KAAAC,EAAM,GAAAC,CAAG,EAA6B,CAC9C,IAAMC,EAAO,IAAIC,EAAKH,EAAMC,CAAE,EAC9B,KAAK,MAAM,KAAKC,CAAI,CACtB,CAEA,WAAWH,EAAY,CACrB,KAAK,MAAQ,KAAK,MAAM,OAAQK,GAAMA,IAAML,CAAI,EAChD,KAAK,MAAQ,KAAK,MAAM,OACrBG,GAASA,EAAK,OAASH,GAAQG,EAAK,KAAOH,CAC9C,CACF,CAEA,WAAWG,EAAY,CACrB,KAAK,MAAQ,KAAK,MAAM,OAAQ,GAAM,IAAMA,CAAI,CAClD,CAEA,KAAKG,EAA+B,CAClC,KAAK,MAAM,QAASN,GAAS,CAC3BA,EAAK,KAAKM,CAAG,CACf,CAAC,EAED,KAAK,MAAM,QAASH,GAAS,CAC3BA,EAAK,KAAKG,CAAG,CACf,CAAC,CACH,CACF,EClCO,IAAMC,EAAN,KAAW,CAChB,EACA,EACA,MACA,OACA,MAEA,YAAY,CACV,EAAAC,EACA,EAAAC,EACA,MAAAC,EAAQ,IACR,OAAAC,EAAS,GACT,MAAAC,EAAQ,MACV,EAMG,CACD,KAAK,EAAIJ,EACT,KAAK,EAAIC,EACT,KAAK,MAAQC,EACb,KAAK,OAASC,EACd,KAAK,MAAQC,CACf,CAEA,KAAKC,EAA+B,CAClCA,EAAI,UAAY,KAAK,MACrBA,EAAI,SAAS,KAAK,EAAG,KAAK,EAAG,KAAK,MAAO,KAAK,MAAM,CACtD,CACF,EC5BO,IAAMC,EAAN,KAAqB,CAC1B,OACA,IACA,MACA,WAEA,YAAY,CACV,OAAAC,EACA,WAAAC,EAAa,MACf,EAGG,CACD,KAAK,OAASD,EACd,KAAK,WAAaC,EAElB,KAAK,IAAMD,EAAO,WAAW,IAAI,EACjC,KAAK,MAAQ,IAAIE,EAEjB,KAAK,KAAK,CACZ,CAMO,QAAQ,CAAE,KAAAC,CAAK,EAAmB,CACvC,KAAK,MAAM,QAAQA,CAAI,EACvB,KAAK,KAAK,CACZ,CAMO,WAAW,CAAE,KAAAA,CAAK,EAAmB,CAC1C,KAAK,MAAM,WAAWA,CAAI,EAC1B,KAAK,KAAK,CACZ,CAMO,QAAQ,CAAE,KAAAC,CAAK,EAAmB,CACvC,KAAK,MAAM,QAAQA,CAAI,EACvB,KAAK,KAAK,CACZ,CAMO,WAAW,CAAE,KAAAA,CAAK,EAAmB,CAC1C,KAAK,MAAM,WAAWA,CAAI,EAC1B,KAAK,KAAK,CACZ,CAKQ,eAAgB,CACjB,KAAK,MAIV,KAAK,IAAI,UAAY,KAAK,WAC1B,KAAK,IAAI,SAAS,EAAG,EAAG,KAAK,OAAO,MAAO,KAAK,OAAO,MAAM,EAC/D,CAKQ,MAAO,CACR,KAAK,MAIV,KAAK,IAAI,UAAU,EAAG,EAAG,KAAK,OAAO,MAAO,KAAK,OAAO,MAAM,EAG9D,KAAK,cAAc,EAEnB,KAAK,MAAM,KAAK,KAAK,GAAG,EAC1B,CACF","names":["Edge","from","to","ctx","Graph","node","from","to","edge","Edge","n","ctx","Node","x","y","width","height","color","ctx","InfiniteCanvas","canvas","background","Graph","node","edge"]}